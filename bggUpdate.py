'''
Reading an XML file generated by XMLfromGoogleSpreadsheet.py, this program will 'slowly' utilize the XML API on
boardgamegeek.com so as not to get throttled.

It will then save the XML files into a directory on a web server so they can be accessed much quicker by applications
(such as Google Spreadsheet)
'''

import time
from lxml import etree
from lxml import html
import requests

IN_FILE = 'files/bgg.xml'

bggTree = etree.parse(IN_FILE)
# Get the root of the bgg.xml tree
bggRoot = bggTree.getroot()
# Get a list of BGG elements
gameList = bggTree.xpath("//root/BGG")

# Parse BGG XML API into Variables, modify, then input to bgg.xml
for game in reversed(gameList):

    url = 'https://www.boardgamegeek.com/xmlapi/boardgame/' + game.attrib["ID"] + '?stats=1'

    passX = False
    while passX == False:
        try:
            page = requests.get(url)
            passX = True
        except requests.exceptions.ConnectionError:
            print ("Connecting error on " + str(game.attrib["ID"] + ", pausing then retrying..."))
            passX = False
            time.sleep (61)
        except requests.exceptions.ChunkedEncodingError:
            print ("Incomplete Read error on " + str(game.attrib["ID"] + ", pausing then retrying..."))
            passX = False
            time.sleep (61)

    # Load and Parse tree?
    apiTree = html.fromstring(page.content)

    # Parse the pertinent data to bgg.xml
    name = apiTree.xpath("//boardgames/boardgame/name[@primary='true']")[0].text

    # child = etree.SubElement(bggUpdateLocation, "Name")
    child = etree.SubElement(game, "Name")
    child.text = name.encode('ascii', 'ignore')

    rating = float(apiTree.xpath("//boardgames/boardgame/statistics/ratings/average")[0].text)
    child = etree.SubElement(game, "Rating")
    child.text = str(rating)

    # Catch the error when rank is 'Not Ranked'
    try:
        rank = int(apiTree.xpath("//boardgames/boardgame/statistics/ratings/ranks/rank[@type='subtype']/@value")[0])
    except ValueError:
        rank = apiTree.xpath("//boardgames/boardgame/statistics/ratings/ranks/rank[@type='subtype']/@value")[0]

    child = etree.SubElement(game, "Rank")
    child.text = str(rank)

    minplayers = int(apiTree.xpath("//boardgames/boardgame/minplayers")[0].text)
    child = etree.SubElement(game, "MinPlayers")
    child.text = str(minplayers)

    maxplayers = int(apiTree.xpath("//boardgames/boardgame/maxplayers")[0].text)
    child = etree.SubElement(game, "MaxPlayers")
    child.text = str(maxplayers)

    playingTime = int(apiTree.xpath("//boardgames/boardgame/playingtime")[0].text)
    child = etree.SubElement(game, "PlayingTime")
    child.text = str(playingTime)

    yearPublished = int(apiTree.xpath("//boardgames/boardgame/yearpublished")[0].text)
    child = etree.SubElement(game, "YearPublished")
    child.text = str(yearPublished)

    try:
        image = apiTree.xpath("//boardgames/boardgame/image")[0].text
    except IndexError:
        image = "https://cf.geekdo-images.com/images/pic1657689_t.jpg" # No Image Available

    child = etree.SubElement(game, "Image")
    child.text = image

    try:
        thumbnail = apiTree.xpath("//boardgames/boardgame/thumbnail")[0].text
    except IndexError:
        thumbnail = "https://cf.geekdo-images.com/images/pic1657689_t.jpg" # No Image Available

    child = etree.SubElement(game, "Thumbnail")
    child.text = thumbnail

    bestPlayers = 0 # this gets set correctly in the logic below

    # best # of player votes iteration
    pollCheck = len(apiTree.xpath("//boardgames/boardgame/poll[@name='suggested_numplayers']/results"))
    bestNumPlayers = {}
    for i in range(1, pollCheck):
        numPlayersVotes = apiTree.xpath("//boardgames/boardgame/poll[@name='suggested_numplayers']/results[@numplayers='" + str(i) + "']/result[@value='Best']/@numvotes")
        bestNumPlayers[i] = int(numPlayersVotes[0])
        # determine best player count
        if bestPlayers == 0:
            bestPlayers = i
        else:
            if bestNumPlayers[bestPlayers] < bestNumPlayers[i]:
                bestPlayers = i
    child = etree.SubElement(game, "BestPlayers")
    child.text = str(bestPlayers)

    print ("grabbed file #" + str(game.attrib["ID"]) + " : " + name).encode('ascii', 'ignore')
    time.sleep(7)

# write XML to file
# TODO: Make the XML look prettier? Why is the new generated XML all bunched on one line? Use BeautifulSoup?
print "Writing to .xml"
outFile = open('files/bgg2.xml', 'w')
writeDoc = etree.ElementTree(bggRoot)
writeDoc.write(outFile, pretty_print=True)
time.sleep (15)
outFile.close()
time.sleep (5)

print "COMPLETE"